var iconv = require("iconv-lite"),
    http = require("http"),
    BufferHelper = require("bufferhelper"),
    querystring = require("querystring"),
    url = require("url");

var charsetMetaReg = /<meta.*charset=['"]?([^'">\s]+)['"].*>/;

exports.Util = {
    getPassport: function (req, res) {
        var passport = {};
        /* online */
        passport['user'] = req.session && req.session.user && (req.session.user.cname || req.session.user.ssoUser.lastName);
        passport['isLogin'] = true;
        passport['uid'] = req.session && req.session.user && req.session.user.workid.replace(/[a-z]+/gi,"99");
        passport['userData'] = req.session && req.session.user;

        /* offline */
        if(global.isOffline){
            passport['user'] = "猫须";
            passport['isLogin'] = true;
            passport['uid'] = "62237";
            passport['userData'] = {};
        }
        /* offline end */
        return passport;
    },
    randomString: function (length) {
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
        length = length || 32;

        var str = '';
        for (var i = 0; i < length; i++) {
            str += chars[Math.floor(Math.random() * chars.length)];
        }
        return str;
    },
    getDateTime: function (d) {
        var date = d ? (new Date(d)) : (new Date());
        return [date.getFullYear(), date.getMonth() + 1, date.getDate()].join("-") + " " + [date.getHours(), date.getMinutes(), date.getSeconds()].join(":");
    },
    getPageContent: function (buffers, defaultCharset) {
        var pageContent = buffers.toString(),
            charset = "utf-8";

        //获取页面声明的编码信息
        if(defaultCharset){
            /* 如果指定了编码，则使用指定的 */
            charset = defaultCharset;
        }
        else if (charsetMetaReg.test(pageContent)) {
            charset = RegExp.$1;
        } else if (!this.isUtf8(pageContent)) {
            charset = "gbk";
        }

        //如果选择的是gbk编码，则进行转码操作
        //if((charset && charset == "2") || !this.isUtf8(buffers)){
        if (charset !== "utf-8") {
            pageContent = iconv.decode(buffers, "gbk");
        } else {
            pageContent = buffers.toString();
        }
        return pageContent;
    },
    isUtf8: function (bytes) {
        var i = 0;
        while (i < bytes.length) {
            if ((// ASCII
                bytes[i] == 0x09 ||
                    bytes[i] == 0x0A ||
                    bytes[i] == 0x0D ||
                    (0x20 <= bytes[i] && bytes[i] <= 0x7E)
                )) {
                i += 1;
                continue;
            }

            if ((// non-overlong 2-byte
                (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&
                    (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF)
                )) {
                i += 2;
                continue;
            }

            if (
                (// excluding overlongs
                    bytes[i] == 0xE0 &&
                        (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)
                    ) || (// straight 3-byte
                    ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||
                        bytes[i] == 0xEE ||
                        bytes[i] == 0xEF) &&
                        (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)
                    ) || (// excluding surrogates
                    bytes[i] == 0xED &&
                        (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x9F) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)
                    )
                ) {
                i += 3;
                continue;
            }

            if (
                (// planes 1-3
                    bytes[i] == 0xF0 &&
                        (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                        (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                    ) || (// planes 4-15
                    (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&
                        (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                        (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                    ) || (// plane 16
                    bytes[i] == 0xF4 &&
                        (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&
                        (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                        (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                    )
                ) {
                i += 4;
                continue;
            }
            return false;
        }
        return true;
    },
    injectCode: function (pageContent, Case) {
        var content = pageContent,
            codeContent = this.mergeCaseCodeString(Case),
            position = Case.position;

        //1:Head前
        //2:Body后
        //3:Body前
        //4：Head后
        if (position == "1") {
            content = content.replace("<head>", "<head>" + codeContent);
        } else if (position == "2") {	//Body
            content += codeContent;
        } else if (position == "4") {
            content = content.replace("</head>", codeContent + "</head>");
        } else if (position == "3") {
            content = content.replace(/(<body[^>]*>)/, "$1" + codeContent);
        }
        return content;
    },
    mergeCaseCodeString: function (Case, flag) {
        var code = Case.code,
            before = (!flag ? "<script charset='utf-8' class='monitor-script'>" : "") + ";(function(window,document,undefined){\nvar monitor = new __Case(SafyGlobal.taskid);var should=function(obj){return new window.__Case.should(obj,monitor);};try{\n",
            after = "\n}catch(e){monitor.warn('单侧代码有错误：' + e.message);};})(window,window.document);" + (!flag ? "</script>" : "");

        if ((/<\/script>/).test(code)) {
            return code;
        }

        if (!(/monitor\.createAction/).test(code)) {
            if (!(/\.complete\(\)/).test(code)) {
                code += "\n;monitor.complete();";
            }
        }

        if (!(/monitor\.run/).test(code)) {
            code = "\nmonitor.run(function(){\n" + code + "\n});";
        }
        return before + code + after;
    },
    formatJSON: function (txt, compress/*是否为压缩模式*/) {    /* 格式化JSON源码(对象转换为JSON文本) */
        var indentChar = '    ';
        if (/^\s*$/.test(txt)) {
            console.log('数据为空,无法格式化! ');
            return;
        }
        try {
            var data = eval('(' + txt + ')');
        }
        catch (e) {
            console.log('数据源语法错误,格式化失败! 错误信息: ' + e.description, 'err');
            return;
        }
        ;

        var draw = [],
            last = false,
            This = this,
            line = compress ? '' : '\n',
            nodeCount = 0,
            maxDepth = 0;

        var notify = function (name, value, isLast, indent/*缩进*/, formObj) {
            nodeCount++;
            /*节点计数*/
            for (var i = 0, tab = ''; i < indent; i++) tab += indentChar;
            /* 缩进HTML */
            tab = compress ? '' : tab;
            /*压缩模式忽略缩进*/
            maxDepth = ++indent;
            /*缩进递增并记录*/

            if (value && value.constructor == Array) {/*处理数组*/
                draw.push(tab + (formObj ? ('"' + name + '" : ') : '') + '[' + line);
                /*缩进'[' 然后换行*/

                for (var i = 0; i < value.length; i++)
                    notify(i, value[i], i == value.length - 1, indent, false);

                draw.push(tab + ']' + (isLast ? line : (',' + line)));
                /*缩进']'换行,若非尾元素则添加逗号*/
            } else if (value && typeof value == 'object') {/*处理对象*/
                draw.push(tab + (formObj ? ('"' + name + '" : ') : '') + '{' + line);
                /*缩进'{' 然后换行*/
                var len = 0, i = 0;
                for (var key in value) len++;
                for (var key in value) notify(key, value[key], ++i == len, indent, true);

                draw.push(tab + '}' + (isLast ? line : (',' + line)));
                /*缩进'}'换行,若非尾元素则添加逗号*/
            } else {
                if (typeof value == 'string') value = '"' + value + '"';
                draw.push(tab + (formObj ? ('"' + name + '" : ') : '') + value + (isLast ? '' : ',') + line);
            }
            ;
        };
        var isLast = true, indent = 0;
        notify('', data, isLast, indent, false);
        return draw.join('');
    },

    isArray: function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    },

    httpPost: function (pageurl, data, callback, charset) {
        var postdata = querystring.stringify(data || {}),
            urlinfo = url.parse(pageurl),
            options = {
                host: urlinfo.hostname,
                port: urlinfo.port,
                path: urlinfo.path,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': postdata.length
                }
            };


        var that = this;

        var req = http.request(options, function (response) {
            //response.setEncoding('utf8');

            var bufferHelper = new BufferHelper();

            response.on("data", function (buffer) {
                bufferHelper.concat(buffer);
            });

            response.on("end", function () {
                var buffers = bufferHelper.toBuffer(),
                    content = that.getPageContent(buffers, charset);

                callback && callback(response, content);
            });
        });

        req.write(postdata);
        req.end();
    },

    httpFetchBuffer: function (url, callback) {
        var that = this;

        http.get(url, function (response) {

            var bufArr = [];

            response.on("data", function (buffer) {
                bufArr.push(buffer);
            });

            response.on("end", function () {
                var buf = Buffer.concat(bufArr);
                callback && callback(response, buf);
            });
            response.on('error', function(e) {
                console.log('httpFetchBuffer:problem with request: ' + e.message);
            });
        });
    },
    say : function(){ return 'hello world'; },
    /**
     * 获取 PhantomPath
     */
    getPhantomPath: function () {
        var isWin = process.platform.indexOf("win") === 0,
            phantomExecutePath = "runner/phantom/" + process.platform + "/" + process.arch + "/phantomjs";
        if (isWin) {
            phantomExecutePath = phantomExecutePath.replace(/\//g, "\\") + ".exe";
        }
        return phantomExecutePath;
    },
    echo: function (data) {
        console.log(JSON.stringify(data));
    },
    /**
     * 获取request的参数
     * @param req
     * @param key
     * @returns {*|string}
     */
    getParam:function(req,key){
        return req.query[key] || req.body[key]||'';
    }
};





